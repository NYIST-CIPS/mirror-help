{
  "_from": "web-resource-inliner@1.2.1",
  "_id": "web-resource-inliner@1.2.1",
  "_inBundle": false,
  "_integrity": "sha1-wCMyrZhe0A2kwjEMBpn7LlupZ18=",
  "_location": "/web-resource-inliner",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "web-resource-inliner",
    "fetchSpec": "1.2.1",
    "name": "web-resource-inliner",
    "raw": "web-resource-inliner@1.2.1",
    "rawSpec": "1.2.1",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/web-resource-inliner/-/web-resource-inliner-1.2.1.tgz",
  "_shasum": "c02332ad985ed00da4c2310c0699fb2e5ba9675f",
  "_spec": "web-resource-inliner@1.2.1",
  "_where": "/mnt/d/project/NYISTOSUG/mirrorhelp-gitbook",
  "author": {
    "email": "jarrett.widman@vokal.io",
    "name": "Jarrett Widman",
    "url": "https://github.com/jrit"
  },
  "bugs": {
    "url": "https://github.com/jrit/web-resource-inliner/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "async": "^0.9.0",
    "clean-css": "1.1.7",
    "cli-color": "^0.3.2",
    "datauri": "~0.2.0",
    "lodash": "^3.10.1",
    "request": "^2.49.0",
    "uglify-js": "^2.4.1",
    "xtend": "^4.0.0"
  },
  "deprecated": false,
  "description": "Inlines img, script and link tags into the same file.",
  "devDependencies": {
    "faux-jax": "^4.1.0",
    "istanbul": "^0.3.5",
    "mime-types": "^2.1.7",
    "mocha": "^2.0.1"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/jrit/web-resource-inliner#readme",
  "keywords": [
    "inline",
    "js",
    "css",
    "scripts",
    "stylesheets",
    "html",
    "datauri"
  ],
  "license": "MIT",
  "main": "src/inline.js",
  "name": "web-resource-inliner",
  "optionalDependencies": {},
  "readme": "# web-resource-inliner[![build status](https://secure.travis-ci.org/jrit/web-resource-inliner.png)](http://travis-ci.org/jrit/web-resource-inliner)\r\n\r\nBrings externally referenced resources, such as js, css and images, into a single file.\r\n\r\nFor example:\r\n\r\n```html\r\n<link href=\"css/style.css\" rel=\"stylesheet\" data-inline >\r\n```\r\nis replaced with\r\n```html\r\n<style>\r\n/* contents of css/style.css */\r\n</style>\r\n```\r\n\r\nJavascript references are brought inline, and images in the html and css blocks are converted to base-64 data: urls.\r\n\r\nBy default, all links and scripts are inlined, plus any images under 8KB, however this behavior can be overrided via several options.\r\n\r\n\r\n## Getting Started\r\n```\r\nnpm install web-resource-inliner\r\n```\r\n\r\n\r\n## Usage Examples\r\n\r\nFor a number of usage examples, see ./test/spec.js and the associated test.* and test_out.* files in ./test/cases/\r\n\r\n## Methods\r\n\r\n#### html( options, callback )\r\nExpects options.fileContent to be HTML and creates a new HTML document. `callback` will be called on completion or error with arguments `( error, result )`.\r\n\r\n#### css( options, callback )\r\nExpects options.fileContent to be CSS and creates a new CSS document. `callback` will be called on completion or error with arguments `( error, result )`.\r\n\r\n\r\n## Options\r\n\r\n#### `fileContent`, required\r\nThis is the HTML or CSS content to be inlined, you should provide HTML to the `html()` method and CSS to the `css()` method or you will get errors or garbage output.\r\n\r\n#### `inlineAttribute`, string, default `data-inline`\r\nSets the attribute that is used to include/exclude specific resources based on the default behavior for the resource type. For example, if `scripts` is set to `false`, an individual script can be inlined by adding the attribute to the `script` tag like `<script src=\"myscript.js\" data-inline ></script>`. On the other hand, if `images` are set to be inlined by default, a specific image can be excluded by adding `-ignore` to the end of the `inlineAttribute` like `<img src=\"myimg.png\" data-inline-ignore >`. In CSS, a comment is required at the end of the line to perform the same thing, such as `/*data-inline*/` or `/*data-inline-ignore*/`.\r\n\r\n#### `images`, Boolean or Number, default `8`\r\nWhen true, inline images unless they have an exclusion attribute (see inlineAttribute option). When false, exclude images unless they have an inclusion attribute (see inlineAttribute option). When a number, inline images only when the base64 content size is less than the number of KBs. For example, the default is to only inline images less than 8KB.\r\n\r\n#### `scripts`, Boolean or Number, default `true`\r\nWhen true, inline scripts unless they have an exclusion attribute (see inlineAttribute option). When false, exclude scripts unless they have an inclusion attribute (see inlineAttribute option). When a number, inline scripts only when the base64 content size is less than the number of KBs.\r\n\r\n#### `links`, Boolean or Number, default `true`\r\nWhen true, inline stylesheet links unless they have an exclusion attribute (see inlineAttribute option). When false, exclude stylesheet links unless they have an inclusion attribute (see inlineAttribute option). When a number, inline stylesheet links only when the base64 content size is less than the number of KBs.\r\n\r\n#### `relativeTo`, string, default empty string\r\nDescribes the path relationship between where web-resource-inliner is running and what the relative paths in `fileContent` or href/src urls refer to. For example, the tests cases in this package are in `test/cases/` so their relative paths start by referring to that folder, but the root of this project and where `npm test` runs from is 2 folders up, so `relativeTo` is set to `test/cases/` in `test/spec.js`. Likewise, with `href=\"content.css\"` and a `relativeTo` of `http://github.com/` the resource retrieved would be `http://github.com/content.css`.\r\n\r\n#### `rebaseRelativeTo`, string, default empty string\r\nDescribes the path relationship between CSS content and the context it will be loaded in. For example, when a CSS file contains `url(some-file.png)` and the file is moved from a location in a folder like `/css` to `/` then the path to the image needs to be changed to `url(css/some-file.png)`. In this case, `rebaseRelativeTo` would be `css`. You probably don't want to set this when you are using `html()`.\r\n\r\n#### `cssmin`, Boolean, default `false`\r\nIf cssmin is assigned `true`, CSS will be minified before inlined.\r\n\r\n#### `uglify`, Boolean, default `false`\r\nIf uglify is assigned `true`, JavaScript file will be minified before inlined.\r\n\r\n#### `strict`, Boolean, default `false`\r\nWhen strict is `true`, a missing resource will cause the inliner to halt and return an error in the callback. The default behavior is to log a warning to the console and continue inlining with the available resources, which is more similar to how a web page behaves.\r\n\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Run tests with `npm test`.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jrit/web-resource-inliner.git"
  },
  "scripts": {
    "coverage": "node ./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- --ui bdd -R spec",
    "format": "jscs . -x",
    "lint": "eslint . --fix || true",
    "test": "mocha test"
  },
  "version": "1.2.1"
}
