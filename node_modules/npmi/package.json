{
  "_from": "npmi@0.1.2",
  "_id": "npmi@0.1.2",
  "_inBundle": false,
  "_integrity": "sha1-7ZEhwIIBxKFa0S88wzDZKJsLoHw=",
  "_location": "/npmi",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "npmi",
    "fetchSpec": "0.1.2",
    "name": "npmi",
    "raw": "npmi@0.1.2",
    "rawSpec": "0.1.2",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/npmi/-/npmi-0.1.2.tgz",
  "_shasum": "ed9121c08201c4a15ad12f3cc330d9289b0ba07c",
  "_spec": "npmi@0.1.2",
  "_where": "/mnt/d/project/NYISTOSUG/mirrorhelp-gitbook",
  "author": {
    "email": "max.tricoire@gmail.com",
    "name": "Maxime Tricoire"
  },
  "bugs": {
    "url": "https://github.com/maxleiko/npmi/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "npm": "^2.1.12",
    "semver": "^4.1.0"
  },
  "deprecated": false,
  "description": "Gives a simplier API to npm install (programatically installs stuffs)",
  "devDependencies": {},
  "homepage": "https://github.com/maxleiko/npmi",
  "keywords": [
    "npm",
    "install",
    "api",
    "programatically"
  ],
  "license": "MIT",
  "main": "npmi.js",
  "name": "npmi",
  "optionalDependencies": {},
  "readme": "npmi [![Build Status](http://drone.braindead.fr/github.com/maxleiko/npmi/status.svg?branch=master)](http://drone.braindead.fr/github.com/maxleiko/npmi)\n====\n\nNodeJS package that gives a simplier API to npm install (programatically installs things)\n\n### Installation\n```sh\nnpm install npmi --save\n```\n\n### Options\n#### options.name\n__Type:__ `String`\n__Optional:__ `true`\n\nIf you don't specify a `name` in options, but just a `path`, __npmi__ will do the same as if you were at this path in a terminal and executing `npm install`  \nOtherwise, it will install the module specified by this name like `npm install module-name` does.\n\n#### options.version\n__Type:__ `String`\n__Optional:__ `true`\n__Default__ `'latest'`\n\nDesired version for installation\n\n#### options.path\n__Type:__ `String`\n__Optional:__ `true`\n__Default__ `'.'`\n\nDesired location for installation (note that if you specified /some/foo/path, __npm__ will automatically create a `node_modules` sub-folder at this location, resulting in `/some/foo/path/node_modules`). So don't specify the `node_modules` part in your path\n\n#### options.forceInstall\n__Type:__ `Boolean`\n__Optional:__ `true`\n__Default__ `false`\n\nIf true, __npmi__ will install `options.name` module even though it has already been installed.  \nIf false, __npmi__ will check if the module is already installed, if it is, it will also check if the installed version is equal to `options.version`, otherwise, it will install `options.name@options.version`\n\n#### options.localInstall\n__Type:__ `Boolean`\n__Optional:__ `true`\n__Default__ `false`\n\nAllows __npmi__ to install local module that are not on __npm registry__. If, you want to install a local module by specifying its full path in `options.name`, you need to set this to `true`.\n\n#### options.npmLoad\n__Type:__ `Object`\n__Optional:__ `true`\n__Default__ `{loglevel: 'silent'}`\n\nThis object is given to __npm__ and allows you to do some fine-grained npm configurations.  \nIt is processed by __npm__ like command-line arguments but within an Object map ([npm-config](https://www.npmjs.org/doc/misc/npm-config.html))\n\n### Usage example\n```js\nvar npmi = require('npmi');\nvar path = require('path');\n\n\nvar options = {\n\tname: 'your-module',\t// your module name\n\tversion: '0.0.1',\t\t// expected version [default: 'latest']\n\tpath: '.',\t\t\t\t// installation path [default: '.']\n\tforceInstall: false,\t// force install if set to true (even if already installed, it will do a reinstall) [default: false]\n\tnpmLoad: {\t\t\t\t// npm.load(options, callback): this is the \"options\" given to npm.load()\n\t\tloglevel: 'silent'\t// [default: {loglevel: 'silent'}]\n\t}\n};\nnpmi(options, function (err, result) {\n\tif (err) {\n\t\tif \t\t(err.code === npmi.LOAD_ERR) \tconsole.log('npm load error');\n\t\telse if (err.code === npmi.INSTALL_ERR) console.log('npm install error');\n\t\treturn console.log(err.message);\n\t}\n\n\t// installed\n\tconsole.log(options.name+'@'+options.version+' installed successfully in '+path.resolve(options.path));\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/maxleiko/npmi.git"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "version": "0.1.2"
}
